package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.Dao.CheckBeforeBean4List;
import java.util.List;

import com.fangzuo.assist.Dao.CheckBeforeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHECK_BEFORE_BEAN".
*/
public class CheckBeforeBeanDao extends AbstractDao<CheckBeforeBean, Long> {

    public static final String TABLENAME = "CHECK_BEFORE_BEAN";

    /**
     * Properties of entity CheckBeforeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IcCardNo = new Property(1, String.class, "IcCardNo", false, "IC_CARD_NO");
        public final static Property SerialNumber = new Property(2, String.class, "SerialNumber", false, "SERIAL_NUMBER");
        public final static Property ErpOrderNo = new Property(3, String.class, "ErpOrderNo", false, "ERP_ORDER_NO");
        public final static Property CustomerOrSupplier = new Property(4, String.class, "CustomerOrSupplier", false, "CUSTOMER_OR_SUPPLIER");
        public final static Property OrderType = new Property(5, String.class, "OrderType", false, "ORDER_TYPE");
        public final static Property MaterielList = new Property(6, String.class, "MaterielList", false, "MATERIEL_LIST");
    }

    private final CheckBeforeBean4List MaterielListConverter = new CheckBeforeBean4List();

    public CheckBeforeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CheckBeforeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHECK_BEFORE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IC_CARD_NO\" TEXT," + // 1: IcCardNo
                "\"SERIAL_NUMBER\" TEXT," + // 2: SerialNumber
                "\"ERP_ORDER_NO\" TEXT," + // 3: ErpOrderNo
                "\"CUSTOMER_OR_SUPPLIER\" TEXT," + // 4: CustomerOrSupplier
                "\"ORDER_TYPE\" TEXT," + // 5: OrderType
                "\"MATERIEL_LIST\" TEXT);"); // 6: MaterielList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHECK_BEFORE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CheckBeforeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String IcCardNo = entity.getIcCardNo();
        if (IcCardNo != null) {
            stmt.bindString(2, IcCardNo);
        }
 
        String SerialNumber = entity.getSerialNumber();
        if (SerialNumber != null) {
            stmt.bindString(3, SerialNumber);
        }
 
        String ErpOrderNo = entity.getErpOrderNo();
        if (ErpOrderNo != null) {
            stmt.bindString(4, ErpOrderNo);
        }
 
        String CustomerOrSupplier = entity.getCustomerOrSupplier();
        if (CustomerOrSupplier != null) {
            stmt.bindString(5, CustomerOrSupplier);
        }
 
        String OrderType = entity.getOrderType();
        if (OrderType != null) {
            stmt.bindString(6, OrderType);
        }
 
        List MaterielList = entity.getMaterielList();
        if (MaterielList != null) {
            stmt.bindString(7, MaterielListConverter.convertToDatabaseValue(MaterielList));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CheckBeforeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String IcCardNo = entity.getIcCardNo();
        if (IcCardNo != null) {
            stmt.bindString(2, IcCardNo);
        }
 
        String SerialNumber = entity.getSerialNumber();
        if (SerialNumber != null) {
            stmt.bindString(3, SerialNumber);
        }
 
        String ErpOrderNo = entity.getErpOrderNo();
        if (ErpOrderNo != null) {
            stmt.bindString(4, ErpOrderNo);
        }
 
        String CustomerOrSupplier = entity.getCustomerOrSupplier();
        if (CustomerOrSupplier != null) {
            stmt.bindString(5, CustomerOrSupplier);
        }
 
        String OrderType = entity.getOrderType();
        if (OrderType != null) {
            stmt.bindString(6, OrderType);
        }
 
        List MaterielList = entity.getMaterielList();
        if (MaterielList != null) {
            stmt.bindString(7, MaterielListConverter.convertToDatabaseValue(MaterielList));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CheckBeforeBean readEntity(Cursor cursor, int offset) {
        CheckBeforeBean entity = new CheckBeforeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // IcCardNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SerialNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ErpOrderNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CustomerOrSupplier
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // OrderType
            cursor.isNull(offset + 6) ? null : MaterielListConverter.convertToEntityProperty(cursor.getString(offset + 6)) // MaterielList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CheckBeforeBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIcCardNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSerialNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setErpOrderNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCustomerOrSupplier(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrderType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMaterielList(cursor.isNull(offset + 6) ? null : MaterielListConverter.convertToEntityProperty(cursor.getString(offset + 6)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CheckBeforeBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CheckBeforeBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CheckBeforeBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
